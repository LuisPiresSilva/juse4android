package org.quasar.usemodel2Android.persistence;

import java.io.File;
import java.io.IOException;
import java.util.Collection;
import java.util.HashSet;
import java.util.Set;

//MODEL_CLASSES_IMPORT

import android.content.Context;

import com.db4o.Db4oEmbedded;
import com.db4o.ObjectContainer;
import com.db4o.ObjectSet;
import com.db4o.config.AndroidSupport;
import com.db4o.config.EmbeddedConfiguration;
import com.db4o.cs.Db4oClientServer;
import com.db4o.cs.config.ClientConfiguration;
import com.db4o.query.Query;

public class Database {

	private static ObjectContainer oc = null;
	private static Context context;
	private final static String DataBaseName = "Database";
	private final static String DataBaseExtension = ".db4o";

	/**
	 * Create, open and close the database
	 */
	public synchronized static ObjectContainer OpenDB() {
		try {
			if (oc == null || oc.ext().isClosed()) {
				oc = Db4oEmbedded.openFile(dbConfig(), db4oDBFullPath(context));
			}
			return oc;
		} catch (Exception ie) {
			return null;
		}
	}

	public synchronized Context getContext() {
		return context;
	}

	public synchronized static void setContext(Context context) {
		Database.context = context;
	}

	/**
	 * Configure the behavior of the database
	 */

	public static synchronized void DeleteDB(){
		new File(db4oDBFullPath(context)).delete();
	}
	
	public static synchronized ObjectContainer DefragDB() {
		try {
			if (oc == null || oc.ext().isClosed()) {
				oc = Db4oEmbedded.openFile(dbConfig(), db4oDBFullPath(context));
			}
			return oc;
		} catch (Exception ie) {
			return null;
		}
	}

	private static EmbeddedConfiguration dbDefragConfig() throws IOException {
		EmbeddedConfiguration configuration = Db4oEmbedded.newConfiguration();

		return configuration;
	}

	public static ClientConfiguration dbServerConfig(){
		ClientConfiguration configuration = Db4oClientServer.newClientConfiguration();

		return configuration;
	}
	
	public static EmbeddedConfiguration dbConfig() {
		EmbeddedConfiguration configuration = Db4oEmbedded.newConfiguration();
		configuration.common().add(new AndroidSupport());
		configuration.file().lockDatabaseFile(false);

		return configuration;
	}

	/**
	 * Returns the path for the database location
	 */
//	public synchronized static void store(Object object) {
//		oc.store(object);
//		oc.commit();
//	}

	public static String db4oDBFullPath(Context ctx) {
		return ctx.getDir("data", Context.MODE_PRIVATE) + "/" + DataBaseName + DataBaseExtension;
	}

	/**
	 * opens a new session
	 */
//	public static ObjectContainer getDatabaseSession() {
//		if(oc == null)
//			OpenDB().ext().openSession();
//		return oc.ext().openSession();
//	}

	/**
	 * Closes the database
	 */

	public synchronized static void close() {
		if (oc != null)
			oc.close();
	}

//	public synchronized static <T> Set<T> allInstances(Class<T> prototype) {
//		return new HashSet<T>(oc.query(prototype));
//	}

	public synchronized static <T, Y> Set<T> allInstances(Class<Y> prototype) {
		return new HashSet<T>((Collection<? extends T>)OpenDB().query(prototype));
	}
	
	public synchronized static <T, Y> ObjectSet<T> allInstancesOrdered(Class<Y> prototype) {
		return (ObjectSet<T>) OpenDB().query(prototype);
	}
	
	public synchronized static <T> T get(Class<T> c, String fieldName, Object constraint) {
		Query q = OpenDB().query();
		q.constrain(c);
		q.descend(fieldName).constrain(constraint);
		ObjectSet<T> result = q.execute();
		if (result.hasNext())
			return result.next();
		return null;
	}

	public synchronized static <T> T get(Class<T> c, String fieldName, String constraint) {
		Query q = OpenDB().query();
		q.constrain(c);
		q.descend(fieldName).constrain(constraint);
		ObjectSet<T> result = q.execute();
		if (result.hasNext())
			return result.next();
		return null;
	}

	//Dentro do contexto de DB's ou seja todos os objectos têm 1 atributo ID unico
	public synchronized static <T> T get(Class<T> c, int constraint) {
		Query q = OpenDB().query();
		q.constrain(c);
		q.descend("ID").constrain(constraint);
		ObjectSet<T> result = q.execute();
		if (result.hasNext())
			return result.next();
		return null;
	}
	
	public synchronized static <T> T get(ObjectContainer oc, Class<T> c, int constraint) {
		Query q = oc.query();
		q.constrain(c);
		q.descend("ID").constrain(constraint);
		ObjectSet<T> result = q.execute();
		if (result.hasNext())
			return result.next();
		return null;
	}

//	para uso no Server
//	public static Object get(ObjectContainer session, String string, int getoldObjectID) {
//		Query q = session.query();
//		q.constrain(c);
//		q.descend("ID").constrain(constraint);
//		ObjectSet<T> result = q.execute();
//		if (result.hasNext())
//			return result.next();
//		return null;
//	}
	
	public static ObjectSet<?> get(Object superClass, Object subClass) {
		ObjectSet<?> result = OpenDB().query(subClass.getClass());
		if (result != null)
			return result;
		return null;
	}
	
	public static Object get(Object object){
		return OpenDB().queryByExample(object);
	}

}
